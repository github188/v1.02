<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LF_VMC_V102.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LF_VMC_V102.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Sun Feb 19 15:37:52 2017
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MaintenTradeConfig &rArr; LoadNewTradeParam &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[99]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3d]">AndroidService</a> from android.o(i.AndroidService) referenced from main.o(i.main)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from key.o(i.EINT1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from i2c.o(i.I2C0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">MaintenDevConfig</a> from maintenance.o(i.MaintenDevConfig) referenced from maintenance.o(i.EnterMaintenance)
 <LI><a href="#[36]">MaintenDevInfo</a> from maintenance.o(i.MaintenDevInfo) referenced from maintenance.o(i.EnterMaintenance)
 <LI><a href="#[38]">MaintenDevTest</a> from maintenance.o(i.MaintenDevTest) referenced from maintenance.o(i.EnterMaintenance)
 <LI><a href="#[39]">MaintenTradeConfig</a> from maintenance.o(i.MaintenTradeConfig) referenced from maintenance.o(i.EnterMaintenance)
 <LI><a href="#[3a]">MaintenTradeLog</a> from maintenance.o(i.MaintenTradeLog) referenced from maintenance.o(i.EnterMaintenance)
 <LI><a href="#[3c]">Maintenance</a> from maintenance.o(i.Maintenance) referenced from main.o(i.main)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from timer.o(i.TIMER2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from timer.o(i.TIMER3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from uart0.o(i.UART0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from mdb.o(i.UART2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from uart3.o(i.UART3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3b]">VendService</a> from vendservice.o(i.VendService) referenced from main.o(i.main)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[40]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[35]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[34]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[33]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[3f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[3e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[17b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[17c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[44]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[17d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[83]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[47]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[49]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4c]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[17e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[17f]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[4d]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[50]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[53]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[55]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[57]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[58]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[5b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[180]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[5d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[61]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[63]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[181]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[6d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[182]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[183]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[65]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[184]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[185]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[186]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[187]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[67]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[188]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[189]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[18a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[190]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[191]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[192]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[193]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[194]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[195]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[196]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[197]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[198]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[199]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[19a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[19b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[19c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[19d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[19e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[19f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[174]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1a3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertoshooks.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[78]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
</UL>

<P><STRONG><a name="[7a]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
</UL>

<P><STRONG><a name="[7c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[7d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[7b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[81]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[115]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneChinese16x16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneAscIICh32x16
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneAscIICh16x8
</UL>

<P><STRONG><a name="[121]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispPayoutPage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispIOUPage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
</UL>

<P><STRONG><a name="[122]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispFreePage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispEndPage
</UL>

<P><STRONG><a name="[fc]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errcheck
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[84]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1a6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart0
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBufferClr
</UL>

<P><STRONG><a name="[86]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[77]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1a9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[46]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[79]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[33]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[60]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[89]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[8c]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[52]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5a]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[8d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5c]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[48]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1af]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[62]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[64]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[8a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[6b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[97]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[66]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[95]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8f]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[74]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[90]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[9b]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[9d]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[9e]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[91]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[92]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[9f]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[a0]"></a>API_BUZZER_Buzzer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyboard.o(i.API_BUZZER_Buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_BUZZER_Buzzer &rArr; Buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[a2]"></a>API_COM_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, com.o(i.API_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = API_COM_Init &rArr; InitUart3
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart0
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AndroidService
</UL>

<P><STRONG><a name="[a5]"></a>API_COM_ReadCharFromBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, com.o(i.API_COM_ReadCharFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_COM_ReadCharFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3GetCh
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0GetCh
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AndroidService
</UL>

<P><STRONG><a name="[a8]"></a>API_COM_RecBufferIsNotEmpty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, com.o(i.API_COM_RecBufferIsNotEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_COM_RecBufferIsNotEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3BuffIsNotEmpty
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0BuffIsNotEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AndroidService
</UL>

<P><STRONG><a name="[ab]"></a>API_COM_SendStr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, com.o(i.API_COM_SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = API_COM_SendStr &rArr; Uart3PutStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3PutStr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0PutStr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AndroidService
</UL>

<P><STRONG><a name="[ae]"></a>API_FRAM_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fram.o(i.API_FRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_FRAM_Init &rArr; I2C0Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[b0]"></a>API_FRAM_ReadFram</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fram.o(i.API_FRAM_ReadFram))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_FRAM_ReadFram &rArr; I2C0RdNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0RdNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVmcParam
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTradeParam
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTotalLog
</UL>

<P><STRONG><a name="[b2]"></a>API_FRAM_WriteFram</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fram.o(i.API_FRAM_WriteFram))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_FRAM_WriteFram &rArr; I2C0WrNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0WrNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultVmcParam
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTotalLog
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewVmcParam
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTradeParam
</UL>

<P><STRONG><a name="[b4]"></a>API_KEY_KeyboardCtrl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboard.o(i.API_KEY_KeyboardCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_KEY_KeyboardCtrl &rArr; KeyboardCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[b6]"></a>API_KEY_KeyboardInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyboard.o(i.API_KEY_KeyboardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = API_KEY_KeyboardInit &rArr; KeyboardInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[b8]"></a>API_KEY_ReadKey</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyboard.o(i.API_KEY_ReadKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_KEY_ReadKey &rArr; ReadKeyValue &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaintenance
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[ba]"></a>API_LCM_ClearArea</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display.o(i.API_LCM_ClearArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_LCM_ClearArea &rArr; LCMClearArea &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearArea
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispFreePage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrFreeText
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessAndLineText
</UL>

<P><STRONG><a name="[bc]"></a>API_LCM_ClearScreen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, display.o(i.API_LCM_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_LCM_ClearScreen &rArr; LCMClearScreen &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaintenance
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispEndPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[be]"></a>API_LCM_DrawLine</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, display.o(i.API_LCM_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = API_LCM_DrawLine &rArr; LCMDrawline &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMDrawline
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaintenance
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[c0]"></a>API_LCM_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, display.o(i.API_LCM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_LCM_Init &rArr; LCMInit &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[c2]"></a>API_LCM_Printf</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, display.o(i.API_LCM_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneChinese16x16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneAscIICh32x16
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneAscIICh16x8
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaintenance
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuhuoPage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuChangePage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispPayoutPage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispIOUPage
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispFreePage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispEndPage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChuhuoPage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChhuoFailPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[c6]"></a>API_LCM_PutRMBSymbol</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, display.o(i.API_LCM_PutRMBSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = API_LCM_PutRMBSymbol &rArr; LCMPrintfBmp &rArr; LCMPutChar &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfBmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
</UL>

<P><STRONG><a name="[c8]"></a>API_MDB_BillType_BillDevice</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, billvalidatorrecycler.o(i.API_MDB_BillType_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_BillType_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillTypeEanbleOrDisable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
</UL>

<P><STRONG><a name="[ca]"></a>API_MDB_CoinType_CoinDevice</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, coinacceptorchanger.o(i.API_MDB_CoinType_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_CoinType_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
</UL>

<P><STRONG><a name="[cb]"></a>API_MDB_Escrow_BillDevice</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, billvalidatorrecycler.o(i.API_MDB_Escrow_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = API_MDB_Escrow_BillDevice &rArr; API_MDB_Stacker_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Stacker_BillDevice
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_BillDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
</UL>

<P><STRONG><a name="[d1]"></a>API_MDB_ExpanDiagStatus_CoinDevice</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, coinacceptorchanger.o(i.API_MDB_ExpanDiagStatus_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_ExpanDiagStatus_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
</UL>

<P><STRONG><a name="[d2]"></a>API_MDB_ExpanFeatureEnable_CoinDevice</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, coinacceptorchanger.o(i.API_MDB_ExpanFeatureEnable_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_ExpanFeatureEnable_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
</UL>

<P><STRONG><a name="[d3]"></a>API_MDB_ExpanIdentification_CoinDevice</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, coinacceptorchanger.o(i.API_MDB_ExpanIdentification_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_ExpanIdentification_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
</UL>

<P><STRONG><a name="[d4]"></a>API_MDB_ExpanPayoutStatus_CoinDevice</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, coinacceptorchanger.o(i.API_MDB_ExpanPayoutStatus_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = API_MDB_ExpanPayoutStatus_CoinDevice &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
</UL>

<P><STRONG><a name="[d6]"></a>API_MDB_ExpanPayoutValuePoll_CoinDevice</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, coinacceptorchanger.o(i.API_MDB_ExpanPayoutValuePoll_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_ExpanPayoutValuePoll_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
</UL>

<P><STRONG><a name="[d7]"></a>API_MDB_ExpanPayout_CoinDevice</STRONG> (Thumb, 42 bytes, Stack size 64 bytes, coinacceptorchanger.o(i.API_MDB_ExpanPayout_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_ExpanPayout_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
</UL>

<P><STRONG><a name="[d8]"></a>API_MDB_L2FeatureEnable_BillDevice</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, billvalidatorrecycler.o(i.API_MDB_L2FeatureEnable_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_MDB_L2FeatureEnable_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
</UL>

<P><STRONG><a name="[d9]"></a>API_MDB_L2IdentificationWithOptBit_BillDevice</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, billvalidatorrecycler.o(i.API_MDB_L2IdentificationWithOptBit_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_L2IdentificationWithOptBit_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
</UL>

<P><STRONG><a name="[cd]"></a>API_MDB_Poll_BillDevice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, billvalidatorrecycler.o(i.API_MDB_Poll_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Poll_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
</UL>

<P><STRONG><a name="[da]"></a>API_MDB_Poll_CoinDevice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, coinacceptorchanger.o(i.API_MDB_Poll_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Poll_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinDevProcess
</UL>

<P><STRONG><a name="[db]"></a>API_MDB_Reset_BillDevice</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, billvalidatorrecycler.o(i.API_MDB_Reset_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Reset_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
</UL>

<P><STRONG><a name="[dc]"></a>API_MDB_Reset_CoinDevice</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, coinacceptorchanger.o(i.API_MDB_Reset_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Reset_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
</UL>

<P><STRONG><a name="[dd]"></a>API_MDB_Setup_BillDevice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, billvalidatorrecycler.o(i.API_MDB_Setup_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Setup_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
</UL>

<P><STRONG><a name="[de]"></a>API_MDB_Setup_CoinDevice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, coinacceptorchanger.o(i.API_MDB_Setup_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Setup_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
</UL>

<P><STRONG><a name="[cf]"></a>API_MDB_Stacker_BillDevice</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, billvalidatorrecycler.o(i.API_MDB_Stacker_BillDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_Stacker_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
</UL>

<P><STRONG><a name="[df]"></a>API_MDB_TubeStatus_CoinDevice</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, coinacceptorchanger.o(i.API_MDB_TubeStatus_CoinDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = API_MDB_TubeStatus_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinGetTubeStatus
</UL>

<P><STRONG><a name="[e0]"></a>API_MDB_UartInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mdb.o(i.API_MDB_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_MDB_UartInit &rArr; MdbBufferClr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBufferClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[e2]"></a>API_RTC_Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, realtimeclock.o(i.API_RTC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_RTC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCReadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispFreePage
</UL>

<P><STRONG><a name="[e4]"></a>API_RTC_RtcInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, realtimeclock.o(i.API_RTC_RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_RTC_RtcInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[e6]"></a>API_RTC_Write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, realtimeclock.o(i.API_RTC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_RTC_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
</UL>

<P><STRONG><a name="[e8]"></a>API_SYSTEM_PinFuctionSelect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.API_SYSTEM_PinFuctionSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_SYSTEM_PinFuctionSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinFuctionSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[cc]"></a>API_SYSTEM_TimerChannelSet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, system.o(i.API_SYSTEM_TimerChannelSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_SYSTEM_TimerChannelSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillTypeEanbleOrDisable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinGetTubeStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[eb]"></a>API_SYSTEM_TimerInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(i.API_SYSTEM_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = API_SYSTEM_TimerInit &rArr; InitTimer &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[d0]"></a>API_SYSTEM_TimerReadChannelValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.API_SYSTEM_TimerReadChannelValue))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillTypeEanbleOrDisable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinGetTubeStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[ed]"></a>API_VENDING_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vending.o(i.API_VENDING_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = API_VENDING_Init &rArr; MOTORInit &rArr; MotorBrakeCtrl &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTORInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[ef]"></a>API_VENDING_Vend</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vending.o(i.API_VENDING_Vend))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = API_VENDING_Vend &rArr; MotorVending &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[3d]"></a>AndroidService</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, android.o(i.AndroidService))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AndroidService &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_SendStr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_RecBufferIsNotEmpty
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_ReadCharFromBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f1]"></a>BillDevProcess</STRONG> (Thumb, 444 bytes, Stack size 72 bytes, mdbbilldeviceoperation.o(i.BillDevProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BillDevProcess &rArr; API_MDB_Escrow_BillDevice &rArr; API_MDB_Stacker_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_BillDevice
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillTypeEanbleOrDisable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_SaleCostMoney
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ChangerMoney
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_BillCoinCtr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[a1]"></a>Buzzer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, buzzer.o(i.Buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_BUZZER_Buzzer
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>ChangePayoutProcessLevel3</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, mdbcoindeviceoperation.o(i.ChangePayoutProcessLevel3))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ChangePayoutProcessLevel3 &rArr; API_MDB_ExpanPayoutStatus_CoinDevice &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayout_CoinDevice
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayoutValuePoll_CoinDevice
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayoutStatus_CoinDevice
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinGetTubeStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ChangerMoney
</UL>

<P><STRONG><a name="[f6]"></a>CoinDevProcess</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, mdbcoindeviceoperation.o(i.CoinDevProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CoinDevProcess &rArr; API_MDB_Poll_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_CoinDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[101]"></a>CrcCheck</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, paramdefine.o(i.CrcCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultVmcParam
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTotalLog
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewVmcParam
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTradeParam
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVmcParam
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTradeParam
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTotalLog
</UL>

<P><STRONG><a name="[f7]"></a>DispChhuoFailPage</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vendservice.o(i.DispChhuoFailPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = DispChhuoFailPage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key.o(i.EINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCtrl
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>I2C0Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, i2c.o(i.I2C0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_Init
</UL>

<P><STRONG><a name="[b1]"></a>I2C0RdNByte</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, i2c.o(i.I2C0RdNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0RdNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2C0_End
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_ReadFram
</UL>

<P><STRONG><a name="[b3]"></a>I2C0WrNByte</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, i2c.o(i.I2C0WrNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0WrNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2C0_End
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_WriteFram
</UL>

<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 0 bytes, i2c.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>InitTimer</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, timer.o(i.InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitTimer &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
</UL>

<P><STRONG><a name="[100]"></a>InitTotalLog</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, paramdefine.o(i.InitTotalLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InitTotalLog &rArr; LoadNewTotalLog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_ReadFram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTotalLog
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[103]"></a>InitTradeParam</STRONG> (Thumb, 214 bytes, Stack size 176 bytes, paramdefine.o(i.InitTradeParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = InitTradeParam &rArr; API_FRAM_ReadFram &rArr; I2C0RdNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_ReadFram
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultTradeParam
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[a3]"></a>InitUart0</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uart0.o(i.InitUart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitUart0
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_Init
</UL>

<P><STRONG><a name="[a4]"></a>InitUart3</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uart3.o(i.InitUart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitUart3
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_Init
</UL>

<P><STRONG><a name="[106]"></a>InitVmcParam</STRONG> (Thumb, 250 bytes, Stack size 144 bytes, paramdefine.o(i.InitVmcParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = InitVmcParam &rArr; LoadDefaultVmcParam &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_ReadFram
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultVmcParam
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[108]"></a>KeyBoardScan</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, key.o(i.KeyBoardScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyBoardScan &rArr; SetAKeyColOutputLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllkeyColInput
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAKeyColOutputLow
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAKeyRowValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOChangeDirectionDelay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrAllKeyRow
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>KeyboardCtrl</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, key.o(i.KeyboardCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyboardCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllkeyColInput
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrAllKeyRow
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_KeyboardCtrl
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>KeyboardInit</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, key.o(i.KeyboardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = KeyboardInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllkeyColInput
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrAllKeyRow
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_KeyboardInit
</UL>

<P><STRONG><a name="[113]"></a>LCMBacklightControl</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lcm.o(i.LCMBacklightControl))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMInit
</UL>

<P><STRONG><a name="[bb]"></a>LCMClearArea</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, lcm.o(i.LCMClearArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCMClearArea &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMSetXY
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataIntoLcmController
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
</UL>

<P><STRONG><a name="[bd]"></a>LCMClearScreen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcm.o(i.LCMClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCMClearScreen &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMSetXY
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataIntoLcmController
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMInit
</UL>

<P><STRONG><a name="[bf]"></a>LCMDrawline</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcm.o(i.LCMDrawline))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCMDrawline &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMSetXY
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataIntoLcmController
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
</UL>

<P><STRONG><a name="[c1]"></a>LCMInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcm.o(i.LCMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCMInit &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearScreen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMBacklightControl
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCmdIntoLcmController
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Init
</UL>

<P><STRONG><a name="[c7]"></a>LCMPrintfBmp</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lcm.o(i.LCMPrintfBmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCMPrintfBmp &rArr; LCMPutChar &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_PutRMBSymbol
</UL>

<P><STRONG><a name="[c3]"></a>LCMPrintfOneAscIICh16x8</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lcm.o(i.LCMPrintfOneAscIICh16x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCMPrintfOneAscIICh16x8 &rArr; LCMPutChar &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
</UL>

<P><STRONG><a name="[c4]"></a>LCMPrintfOneAscIICh32x16</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, lcm.o(i.LCMPrintfOneAscIICh32x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCMPrintfOneAscIICh32x16 &rArr; LCMPutChar &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
</UL>

<P><STRONG><a name="[c5]"></a>LCMPrintfOneChinese16x16</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lcm.o(i.LCMPrintfOneChinese16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCMPrintfOneChinese16x16 &rArr; LCMPutChar &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
</UL>

<P><STRONG><a name="[110]"></a>LCMSetXY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcm.o(i.LCMSetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCmdIntoLcmController
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMDrawline
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearScreen
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearArea
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPutChar
</UL>

<P><STRONG><a name="[104]"></a>LoadDefaultTradeParam</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, paramdefine.o(i.LoadDefaultTradeParam))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTradeParam
</UL>

<P><STRONG><a name="[107]"></a>LoadDefaultVmcParam</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, paramdefine.o(i.LoadDefaultVmcParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LoadDefaultVmcParam &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_WriteFram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVmcParam
</UL>

<P><STRONG><a name="[102]"></a>LoadNewTotalLog</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, paramdefine.o(i.LoadNewTotalLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoadNewTotalLog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_WriteFram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogClearAPI
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEndAPI
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTotalLog
</UL>

<P><STRONG><a name="[116]"></a>LoadNewTradeParam</STRONG> (Thumb, 302 bytes, Stack size 176 bytes, paramdefine.o(i.LoadNewTradeParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LoadNewTradeParam &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_WriteFram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[117]"></a>LoadNewVmcParam</STRONG> (Thumb, 204 bytes, Stack size 136 bytes, paramdefine.o(i.LoadNewVmcParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LoadNewVmcParam &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_WriteFram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
</UL>

<P><STRONG><a name="[13b]"></a>LogChangeAPI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, log.o(i.LogChangeAPI))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ChangerMoney
</UL>

<P><STRONG><a name="[118]"></a>LogClearAPI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, log.o(i.LogClearAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LogClearAPI &rArr; LoadNewTotalLog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTotalLog
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
</UL>

<P><STRONG><a name="[119]"></a>LogEndAPI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, log.o(i.LogEndAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LogEndAPI &rArr; LoadNewTotalLog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTotalLog
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[147]"></a>LogGetMoneyAPI</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, log.o(i.LogGetMoneyAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LogGetMoneyAPI
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_SaleCostMoney
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
</UL>

<P><STRONG><a name="[14c]"></a>LogTransactionAPI</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, log.o(i.LogTransactionAPI))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[c9]"></a>MDBConversation</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, mdb.o(i.MDBConversation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbPutCh
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBufferClr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_TubeStatus_CoinDevice
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Setup_CoinDevice
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Reset_CoinDevice
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_CoinDevice
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayout_CoinDevice
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayoutValuePoll_CoinDevice
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayoutStatus_CoinDevice
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanIdentification_CoinDevice
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanFeatureEnable_CoinDevice
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanDiagStatus_CoinDevice
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_CoinType_CoinDevice
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Stacker_BillDevice
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Setup_BillDevice
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Reset_BillDevice
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_BillDevice
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_L2IdentificationWithOptBit_BillDevice
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_L2FeatureEnable_BillDevice
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_BillType_BillDevice
</UL>

<P><STRONG><a name="[ee]"></a>MOTORInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, motor.o(i.MOTORInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MOTORInit &rArr; MotorBrakeCtrl &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRowCtrl
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorColCtrl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBrakeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_VENDING_Init
</UL>

<P><STRONG><a name="[3c]"></a>Maintenance</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, maintenance.o(i.Maintenance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Maintenance &rArr; Login &rArr; EnterMaintenance &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[127]"></a>MdbBillResetAndSetup</STRONG> (Thumb, 774 bytes, Stack size 56 bytes, mdbbilldeviceoperation.o(i.MdbBillResetAndSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MdbBillResetAndSetup &rArr; API_MDB_L2FeatureEnable_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Stacker_BillDevice
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Setup_BillDevice
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Reset_BillDevice
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_BillDevice
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_L2IdentificationWithOptBit_BillDevice
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_L2FeatureEnable_BillDevice
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_BillType_BillDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[f2]"></a>MdbBillTypeEanbleOrDisable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mdbbilldeviceoperation.o(i.MdbBillTypeEanbleOrDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MdbBillTypeEanbleOrDisable &rArr; API_MDB_BillType_BillDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_BillType_BillDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
</UL>

<P><STRONG><a name="[f5]"></a>MdbCoinGetTubeStatus</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, mdbcoindeviceoperation.o(i.MdbCoinGetTubeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MdbCoinGetTubeStatus &rArr; API_MDB_TubeStatus_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_TubeStatus_CoinDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_UpdateTubeMoney
</UL>

<P><STRONG><a name="[128]"></a>MdbCoinResetAndSetup</STRONG> (Thumb, 582 bytes, Stack size 56 bytes, mdbcoindeviceoperation.o(i.MdbCoinResetAndSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MdbCoinResetAndSetup &rArr; API_MDB_ExpanFeatureEnable_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Setup_CoinDevice
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Reset_CoinDevice
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Poll_CoinDevice
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanIdentification_CoinDevice
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanFeatureEnable_CoinDevice
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanDiagStatus_CoinDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[129]"></a>MdbCoinTypeEanbleOrDisable</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mdbcoindeviceoperation.o(i.MdbCoinTypeEanbleOrDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MdbCoinTypeEanbleOrDisable &rArr; API_MDB_CoinType_CoinDevice &rArr; MDBConversation &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_CoinType_CoinDevice
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_BillCoinCtr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[131]"></a>MdbGetCoinValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdbcoindeviceoperation.o(i.MdbGetCoinValue))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_UpdateTubeMoney
</UL>

<P><STRONG><a name="[f0]"></a>MotorVending</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, motor.o(i.MotorVending))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MotorVending &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSensorRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRowCtrl
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorColCtrl
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_VENDING_Vend
</UL>

<P><STRONG><a name="[e9]"></a>PinFuctionSelect</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pinselect.o(i.PinFuctionSelect))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_PinFuctionSelect
</UL>

<P><STRONG><a name="[12c]"></a>PrintfMoney</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, paramdefine.o(i.PrintfMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PrintfMoney &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispPayoutPage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispIOUPage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
</UL>

<P><STRONG><a name="[e5]"></a>RTCInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, rtc.o(i.RTCInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_RtcInit
</UL>

<P><STRONG><a name="[e3]"></a>RTCReadTime</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtc.o(i.RTCReadTime))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Read
</UL>

<P><STRONG><a name="[e7]"></a>RTCSetTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtc.o(i.RTCSetTime))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Write
</UL>

<P><STRONG><a name="[b9]"></a>ReadKeyValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, key.o(i.ReadKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadKeyValue &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
</UL>

<P><STRONG><a name="[11c]"></a>SetSystemTimerValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.SetSystemTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER1_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCtrl
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardCtrl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER3_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>TimerCtrl</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, timer.o(i.TimerCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>Trace</STRONG> (Thumb, 52 bytes, Stack size 200 bytes, uart0.o(i.Trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0PutChar
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_ExpanPayoutStatus_CoinDevice
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTradeParam
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_UpdateTubeMoney
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_SaleCostMoney
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_IsErrorState
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ChangerMoney
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_BillCoinCtr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>

<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, uart0.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, mdb.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_IRQHandler &rArr; MdbPutCh
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbPutCh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, uart3.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>Uart0BuffIsNotEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart0.o(i.Uart0BuffIsNotEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_RecBufferIsNotEmpty
</UL>

<P><STRONG><a name="[a6]"></a>Uart0GetCh</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart0.o(i.Uart0GetCh))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_ReadCharFromBuffer
</UL>

<P><STRONG><a name="[132]"></a>Uart0PutChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart0.o(i.Uart0PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0PutStr
</UL>

<P><STRONG><a name="[ac]"></a>Uart0PutStr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart0.o(i.Uart0PutStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uart0PutStr
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_SendStr
</UL>

<P><STRONG><a name="[aa]"></a>Uart3BuffIsNotEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart3.o(i.Uart3BuffIsNotEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_RecBufferIsNotEmpty
</UL>

<P><STRONG><a name="[a7]"></a>Uart3GetCh</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart3.o(i.Uart3GetCh))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_ReadCharFromBuffer
</UL>

<P><STRONG><a name="[133]"></a>Uart3PutChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart3.o(i.Uart3PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3PutStr
</UL>

<P><STRONG><a name="[ad]"></a>Uart3PutStr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart3.o(i.Uart3PutStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uart3PutStr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_SendStr
</UL>

<P><STRONG><a name="[3b]"></a>VendService</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, vendservice.o(i.VendService))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = VendService &rArr; VendingService &rArr; LoadNewTradeParam &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVmcParam
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTradeParam
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTotalLog
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_VENDING_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_PinFuctionSelect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_RtcInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_UartInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_KeyboardInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_FRAM_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_BUZZER_Buzzer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingIdle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_COM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[136]"></a>Vend_BillCoinCtr</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, vendservice.o(i.Vend_BillCoinCtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Vend_BillCoinCtr &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[137]"></a>Vend_CLrBusinessAndLineText</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vendservice.o(i.Vend_CLrBusinessAndLineText))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vend_CLrBusinessAndLineText &rArr; API_LCM_ClearArea &rArr; LCMClearArea &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
</UL>

<P><STRONG><a name="[f8]"></a>Vend_CLrBusinessText</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vendservice.o(i.Vend_CLrBusinessText))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vend_CLrBusinessText &rArr; API_LCM_ClearArea &rArr; LCMClearArea &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuhuoPage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuChangePage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispPayoutPage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispIOUPage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChuhuoPage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChhuoFailPage
</UL>

<P><STRONG><a name="[138]"></a>Vend_CLrFreeText</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vendservice.o(i.Vend_CLrFreeText))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vend_CLrFreeText &rArr; API_LCM_ClearArea &rArr; LCMClearArea &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
</UL>

<P><STRONG><a name="[139]"></a>Vend_ChangerMoney</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, vendservice.o(i.Vend_ChangerMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Vend_ChangerMoney &rArr; ChangePayoutProcessLevel3 &rArr; API_MDB_ExpanPayoutStatus_CoinDevice &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogChangeAPI
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetAmountMoney
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[13d]"></a>Vend_ClearDealPar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vendservice.o(i.Vend_ClearDealPar))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[13c]"></a>Vend_DispChaxunPage</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, vendservice.o(i.Vend_DispChaxunPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Vend_DispChaxunPage &rArr; Vend_BillCoinCtr &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ClearDealPar
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessAndLineText
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_BillCoinCtr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[13f]"></a>Vend_DispChuhuoPage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vendservice.o(i.Vend_DispChuhuoPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Vend_DispChuhuoPage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[140]"></a>Vend_DispEndPage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vendservice.o(i.Vend_DispEndPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Vend_DispEndPage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[141]"></a>Vend_DispFreePage</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, vendservice.o(i.Vend_DispFreePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Vend_DispFreePage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[142]"></a>Vend_DispIOUPage</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, vendservice.o(i.Vend_DispIOUPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Vend_DispIOUPage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[143]"></a>Vend_DispPayoutPage</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, vendservice.o(i.Vend_DispPayoutPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Vend_DispPayoutPage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetAmountMoney
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[144]"></a>Vend_DispQuChangePage</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vendservice.o(i.Vend_DispQuChangePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Vend_DispQuChangePage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[145]"></a>Vend_DispQuhuoPage</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vendservice.o(i.Vend_DispQuhuoPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Vend_DispQuhuoPage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[13e]"></a>Vend_DispSalePage</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, vendservice.o(i.Vend_DispSalePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Vend_DispSalePage &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_PutRMBSymbol
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetAmountMoney
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrFreeText
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[13a]"></a>Vend_GetAmountMoney</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vendservice.o(i.Vend_GetAmountMoney))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispPayoutPage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ChangerMoney
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[146]"></a>Vend_GetMoney</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, vendservice.o(i.Vend_GetMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Vend_GetMoney &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetMoneyAPI
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinDevProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_BUZZER_Buzzer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetAmountMoney
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[148]"></a>Vend_IsErrorState</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, vendservice.o(i.Vend_IsErrorState))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Vend_IsErrorState &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[14b]"></a>Vend_IsTuibiAPI</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vendservice.o(i.Vend_IsTuibiAPI))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[149]"></a>Vend_SaleCostMoney</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, vendservice.o(i.Vend_SaleCostMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Vend_SaleCostMoney &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogGetMoneyAPI
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[14a]"></a>Vend_UpdateTubeMoney</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, vendservice.o(i.Vend_UpdateTubeMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Vend_UpdateTubeMoney &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbGetCoinValue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinGetTubeStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
</UL>

<P><STRONG><a name="[94]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[82]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16b]"></a>pvPortMalloc</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, heap.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[175]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[165]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[150]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[16e]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertoshooks.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[16f]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, freertoshooks.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = vApplicationStackOverflowHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[179]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertoshooks.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[166]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[164]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[152]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[151]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[154]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[156]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[15f]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[173]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ce]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_Escrow_BillDevice
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillTypeEanbleOrDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultVmcParam
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTotalLog
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewVmcParam
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaintenance
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinGetTubeStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTradeParam
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_UpdateTubeMoney
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuhuoPage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuChangePage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispIOUPage
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispFreePage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispEndPage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrFreeText
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessText
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_CLrBusinessAndLineText
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChhuoFailPage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingService
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendingIdle
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Maintenance
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AndroidService
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBrakeCtrl
</UL>

<P><STRONG><a name="[16a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[170]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[171]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[176]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14e]"></a>vTaskStartScheduler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[75]"></a>vTaskSwitchContext</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[172]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[10f]"></a>xQueueGenericCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
</UL>

<P><STRONG><a name="[12e]"></a>xQueueGenericReceive</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyValue
</UL>

<P><STRONG><a name="[162]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[130]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14d]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>xTaskIncrementTick</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[169]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[159]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[69]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[35]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[135]"></a>VendingIdle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vendservice.o(i.VendingIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VendingIdle &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[134]"></a>VendingService</STRONG> (Thumb, 1754 bytes, Stack size 40 bytes, vendservice.o(i.VendingService))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = VendingService &rArr; LoadNewTradeParam &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinResetAndSetup
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbBillResetAndSetup
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTransactionAPI
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEndAPI
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTradeParam
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinDevProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_VENDING_Vend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerReadChannelValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SYSTEM_TimerChannelSet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_KeyboardCtrl
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_UpdateTubeMoney
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_SaleCostMoney
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_IsTuibiAPI
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_IsErrorState
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetMoney
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_GetAmountMoney
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispSalePage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuhuoPage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispQuChangePage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispPayoutPage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispIOUPage
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispFreePage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispEndPage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChuhuoPage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_DispChaxunPage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ClearDealPar
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_ChangerMoney
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vend_BillCoinCtr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChhuoFailPage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendService
</UL>

<P><STRONG><a name="[fa]"></a>EnterMaintenance</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, maintenance.o(i.EnterMaintenance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = EnterMaintenance &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[fb]"></a>Errcheck</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, maintenance.o(i.Errcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Errcheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevInfo
</UL>

<P><STRONG><a name="[11a]"></a>Login</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, maintenance.o(i.Login))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Login &rArr; EnterMaintenance &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaintenance
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Maintenance
</UL>

<P><STRONG><a name="[37]"></a>MaintenDevConfig</STRONG> (Thumb, 2656 bytes, Stack size 56 bytes, maintenance.o(i.MaintenDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MaintenDevConfig &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewVmcParam
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintenance.o(i.EnterMaintenance)
</UL>
<P><STRONG><a name="[36]"></a>MaintenDevInfo</STRONG> (Thumb, 420 bytes, Stack size 312 bytes, maintenance.o(i.MaintenDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = MaintenDevInfo &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errcheck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintenance.o(i.EnterMaintenance)
</UL>
<P><STRONG><a name="[38]"></a>MaintenDevTest</STRONG> (Thumb, 1008 bytes, Stack size 24 bytes, maintenance.o(i.MaintenDevTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = MaintenDevTest &rArr; TestCoinValidator &rArr; ChangePayoutProcessLevel3 &rArr; API_MDB_ExpanPayoutStatus_CoinDevice &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestColumn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCoinValidator
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBillValidator
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintenance.o(i.EnterMaintenance)
</UL>
<P><STRONG><a name="[39]"></a>MaintenTradeConfig</STRONG> (Thumb, 8510 bytes, Stack size 104 bytes, maintenance.o(i.MaintenTradeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = MaintenTradeConfig &rArr; LoadNewTradeParam &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewVmcParam
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewTradeParam
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintenance.o(i.EnterMaintenance)
</UL>
<P><STRONG><a name="[3a]"></a>MaintenTradeLog</STRONG> (Thumb, 860 bytes, Stack size 48 bytes, maintenance.o(i.MaintenTradeLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MaintenTradeLog &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogClearAPI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTotalLog
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintenance.o(i.EnterMaintenance)
</UL>
<P><STRONG><a name="[126]"></a>PwdCheck</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, maintenance.o(i.PwdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = PwdCheck &rArr; API_LCM_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_DrawLine
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenTradeLog
</UL>

<P><STRONG><a name="[123]"></a>TestBillValidator</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, maintenance.o(i.TestBillValidator))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = TestBillValidator &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillDevProcess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
</UL>

<P><STRONG><a name="[124]"></a>TestCoinValidator</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, maintenance.o(i.TestCoinValidator))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = TestCoinValidator &rArr; ChangePayoutProcessLevel3 &rArr; API_MDB_ExpanPayoutStatus_CoinDevice &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfMoney
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbGetCoinValue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbCoinTypeEanbleOrDisable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinDevProcess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePayoutProcessLevel3
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearArea
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
</UL>

<P><STRONG><a name="[125]"></a>TestColumn</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, maintenance.o(i.TestColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = TestColumn &rArr; API_VENDING_Vend &rArr; MotorVending &rArr; Trace &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_VENDING_Vend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_Printf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_LCM_ClearScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_ReadKey
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KEY_KeyboardCtrl
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaintenDevTest
</UL>

<P><STRONG><a name="[15b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[15d]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[161]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[167]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[168]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[153]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[157]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[15a]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[3f]"></a>prvIdleTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[163]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[155]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[178]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3e]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[16c]"></a>prvHeapInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, heap.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[16d]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[114]"></a>LCMPutChar</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcm.o(i.LCMPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCMPutChar &rArr; LCMSetXY &rArr; PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMSetXY
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataIntoLcmController
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneChinese16x16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneAscIICh32x16
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfOneAscIICh16x8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPrintfBmp
</UL>

<P><STRONG><a name="[12d]"></a>PutByteIntoSimSpiBus</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lcm.o(i.PutByteIntoSimSpiBus))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDataIntoLcmController
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCmdIntoLcmController
</UL>

<P><STRONG><a name="[112]"></a>PutCmdIntoLcmController</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcm.o(i.PutCmdIntoLcmController))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutCmdIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutByteIntoSimSpiBus
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMSetXY
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMInit
</UL>

<P><STRONG><a name="[111]"></a>PutDataIntoLcmController</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcm.o(i.PutDataIntoLcmController))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutDataIntoLcmController
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutByteIntoSimSpiBus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMDrawline
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearScreen
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMClearArea
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPutChar
</UL>

<P><STRONG><a name="[10c]"></a>ClrAllKeyRow</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, key.o(i.ClrAllKeyRow))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardCtrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardScan
</UL>

<P><STRONG><a name="[109]"></a>GPIOChangeDirectionDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key.o(i.GPIOChangeDirectionDelay))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardScan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAKeyColOutputLow
</UL>

<P><STRONG><a name="[10b]"></a>GetAKeyRowValue</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, key.o(i.GetAKeyRowValue))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardScan
</UL>

<P><STRONG><a name="[f9]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardCtrl
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, key.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardCtrl
</UL>

<P><STRONG><a name="[10a]"></a>SetAKeyColOutputLow</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, key.o(i.SetAKeyColOutputLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetAKeyColOutputLow
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOChangeDirectionDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardScan
</UL>

<P><STRONG><a name="[10d]"></a>SetAllkeyColInput</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, key.o(i.SetAllkeyColInput))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardCtrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardScan
</UL>

<P><STRONG><a name="[fe]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[ff]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[fd]"></a>Wait_I2C0_End</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, i2c.o(i.Wait_I2C0_End))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0WrNByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0RdNByte
</UL>

<P><STRONG><a name="[e1]"></a>MdbBufferClr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mdb.o(i.MdbBufferClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MdbBufferClr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MDB_UartInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
</UL>

<P><STRONG><a name="[11b]"></a>MdbPutCh</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mdb.o(i.MdbPutCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MdbPutCh
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSetParityMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDBConversation
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>MdbSetParityMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdb.o(i.MdbSetParityMode))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbPutCh
</UL>

<P><STRONG><a name="[11e]"></a>MotorBrakeCtrl</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motor.o(i.MotorBrakeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotorBrakeCtrl &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTORInit
</UL>

<P><STRONG><a name="[120]"></a>MotorColCtrl</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, motor.o(i.MotorColCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTORInit
</UL>

<P><STRONG><a name="[11d]"></a>MotorPowerCtrl</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, motor.o(i.MotorPowerCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTORInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBrakeCtrl
</UL>

<P><STRONG><a name="[11f]"></a>MotorRowCtrl</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, motor.o(i.MotorRowCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTORInit
</UL>

<P><STRONG><a name="[12b]"></a>MotorSensorRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motor.o(i.MotorSensorRead))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVending
</UL>

<P><STRONG><a name="[34]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
